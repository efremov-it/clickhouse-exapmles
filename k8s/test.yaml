tolerations:
  - key: "node-role.kubernetes.io/worker-staging"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/worker"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

shards: 1

## @param replicaCount Number of ClickHouse replicas per shard to deploy
## if keeper enable, same as keeper count, keeper cluster by shards.
##
replicaCount: 3

resources:
  limits:
    cpu: 1
    memory: 4Gi
  requests:
    cpu: 125m
    memory: 256Mi

keeper:
  enabled: true

zookeeper:
  enabled: false
  replicaCount: 1
  tolerations:
  - key: "node-role.kubernetes.io/worker"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/worker-staging"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  service:
    ports:
      client: 2181

# extraOverrides: |
#   <clickhouse>
#     <remote_servers>
#       <{{ $.Values.clusterSettings.cluster }}>
#         {{- $shards := $.Values.shards | int }}
#         {{- range $shard, $e := until $shards }}
#         <shard>
#             {{- $replicas := $.Values.replicaCount | int }}
#             {{- if gt $replicas 1 }}
#             <internal_replication>true</internal_replication>
#             {{- end }}
#             {{- range $i, $_e := until $replicas }}
#             <replica>
#                 <host>{{ printf "%s-shard%d-%d.%s.%s.svc.%s" (include "common.names.fullname" $ ) $shard $i (include "clickhouse.headlessServiceName" $) (include "common.names.namespace" $) $.Values.clusterDomain }}</host>
#                 <port>{{ $.Values.service.ports.tcp }}</port>
#                 <user>{{ $.Values.clusterSettings.user }}</user>
#                 <password>{{ $.Values.clusterSettings.password }}</password>
#             </replica>
#             {{- end }}
#         </shard>
#         {{- end }}
#       </{{ $.Values.clusterSettings.cluster }}>
#     </remote_servers> 
#   </clickhouse>

# defaultConfigurationOverrides: |
# <clickhouse>
#   <!-- Macros -->
#   <macros>
#     <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
#     <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
#     <layer>my-release-clickhouse</layer>
#   </macros>
#   <!-- Log Level -->
#   <logger>
#     <level>information</level>
#   </logger>
#   <!-- Cluster configuration - Any update of the shards and replicas requires helm upgrade -->
#   <remote_servers>
#     <default>
#       <shard>
#           <replica>
#               <host>my-release-clickhouse-shard0-0.my-release-clickhouse-headless.lm-stage.svc.cluster.local</host>
#               <port>9000</port>
#               <user from_env="CLICKHOUSE_ADMIN_USER"></user>
#               <password from_env="CLICKHOUSE_ADMIN_PASSWORD"></password>
#           </replica>
#           <replica>
#               <host>my-release-clickhouse-shard0-1.my-release-clickhouse-headless.lm-stage.svc.cluster.local</host>
#               <port>9000</port>
#               <user from_env="CLICKHOUSE_ADMIN_USER"></user>
#               <password from_env="CLICKHOUSE_ADMIN_PASSWORD"></password>
#           </replica>
#       </shard>
#     </default>
#   </remote_servers>
#   <!-- Zookeeper configuration -->
#   <zookeeper>
    
#     <node>
#       <host from_env="KEEPER_NODE_0"></host>
#       <port>2181</port>
#     </node>
#   </zookeeper>
# </clickhouse>

defaultConfigurationOverrides: |
  <clickhouse>
    <!-- Macros -->
    <macros>
      <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
      <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
      <layer>{{ include "common.names.fullname" . }}</layer>
      <cluster>{{ .Values.clusterName }}</cluster>
    </macros>
    <!-- Log Level -->
    <logger>
      <level>{{ .Values.logLevel }}</level>
    </logger>
    {{- if or (ne (int .Values.shards) 1) (ne (int .Values.replicaCount) 1)}}
    <!-- Cluster configuration - Any update of the shards and replicas requires helm upgrade -->
    <remote_servers>
      <{{ .Values.clusterName }}>
        {{- $shards := $.Values.shards | int }}
        {{- range $shard, $e := until $shards }}
        <shard>
            {{- $replicas := $.Values.replicaCount | int }}
            {{- if gt $replicas 1 }}
            <internal_replication>true</internal_replication>
            {{- end }}
            {{- range $i, $_e := until $replicas }}
            <replica>
                <host>{{ printf "%s-shard%d-%d.%s.%s.svc.%s" (include "common.names.fullname" $ ) $shard $i (include "clickhouse.headlessServiceName" $) (include "common.names.namespace" $) $.Values.clusterDomain }}</host>
                <port>{{ $.Values.service.ports.tcp }}</port>
                <user from_env="CLICKHOUSE_ADMIN_USER"></user>
                <password from_env="CLICKHOUSE_ADMIN_PASSWORD"></password>
            </replica>
            {{- end }}
        </shard>
        {{- end }}
      </{{ .Values.clusterName }}>
    </remote_servers>
    {{- end }}
    {{- if .Values.keeper.enabled }}
    <!-- keeper configuration -->
    <keeper_server>
      {{/*ClickHouse keeper configuration using the helm chart */}}
      <tcp_port>{{ $.Values.containerPorts.keeper }}</tcp_port>
      {{- if .Values.tls.enabled }}
      <tcp_port_secure>{{ $.Values.containerPorts.keeperSecure }}</tcp_port_secure>
      {{- end }}
      <server_id from_env="KEEPER_SERVER_ID"></server_id>
      <log_storage_path>/bitnami/clickhouse/keeper/coordination/log</log_storage_path>
      <snapshot_storage_path>/bitnami/clickhouse/keeper/coordination/snapshots</snapshot_storage_path>

      <coordination_settings>
          <operation_timeout_ms>10000</operation_timeout_ms>
          <session_timeout_ms>30000</session_timeout_ms>
          <raft_logs_level>trace</raft_logs_level>
      </coordination_settings>

      <raft_configuration>
      {{- $nodes := .Values.replicaCount | int }}
      {{- range $node, $e := until $nodes }}
      <server>
        <id>{{ $node | int }}</id>
        <hostname from_env="{{ printf "KEEPER_NODE_%d" $node }}"></hostname>
        <port>{{ $.Values.service.ports.keeperInter }}</port>
      </server>
      {{- end }}
      </raft_configuration>
    </keeper_server>
    {{- end }}
    {{- if or .Values.keeper.enabled .Values.zookeeper.enabled .Values.externalZookeeper.servers }}
    <!-- Zookeeper configuration -->
    <zookeeper>
      {{- if or .Values.keeper.enabled }}
      {{- $nodes := .Values.replicaCount | int }}
      {{- range $node, $e := until $nodes }}
      <node>
        <host from_env="{{ printf "KEEPER_NODE_%d" $node }}"></host>
        <port>{{ $.Values.service.ports.keeper }}</port>
      </node>
      {{- end }}
      {{- else if .Values.zookeeper.enabled }}
      {{/* Zookeeper configuration using the helm chart */}}
      {{- $nodes := .Values.zookeeper.replicaCount | int }}
      {{- range $node, $e := until $nodes }}
      <node>
        <host from_env="{{ printf "KEEPER_NODE_%d" $node }}"></host>
        <port>{{ $.Values.zookeeper.service.ports.client }}</port>
      </node>
      {{- end }}
      {{- else if .Values.externalZookeeper.servers }}
      {{/* Zookeeper configuration using an external instance */}}
      {{- range $node :=.Values.externalZookeeper.servers }}
      <node>
        <host>{{ $node }}</host>
        <port>{{ $.Values.externalZookeeper.port }}</port>
      </node>
      {{- end }}
      {{- end }}
    </zookeeper>
    {{- end }}
    {{- if .Values.tls.enabled }}
    <!-- TLS configuration -->
    <tcp_port_secure from_env="CLICKHOUSE_TCP_SECURE_PORT"></tcp_port_secure>
    <https_port from_env="CLICKHOUSE_HTTPS_PORT"></https_port>
    <openSSL>
        <server>
            {{- $certFileName := default "tls.crt" .Values.tls.certFilename }}
            {{- $keyFileName := default "tls.key" .Values.tls.certKeyFilename }}
            <certificateFile>/bitnami/clickhouse/certs/{{$certFileName}}</certificateFile>
            <privateKeyFile>/bitnami/clickhouse/certs/{{$keyFileName}}</privateKeyFile>
            <verificationMode>none</verificationMode>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
            {{- if or .Values.tls.autoGenerated .Values.tls.certCAFilename }}
            {{- $caFileName := default "ca.crt" .Values.tls.certCAFilename }}
            <caConfig>/bitnami/clickhouse/certs/{{$caFileName}}</caConfig>
            {{- else }}
            <loadDefaultCAFile>true</loadDefaultCAFile>
            {{- end }}
        </server>
        <client>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
            <verificationMode>none</verificationMode>
            <invalidCertificateHandler>
                <name>AcceptCertificateHandler</name>
            </invalidCertificateHandler>
        </client>
    </openSSL>
    {{- end }}
    {{- if .Values.metrics.enabled }}
     <!-- Prometheus metrics -->
     <prometheus>
        <endpoint>/metrics</endpoint>
        <port from_env="CLICKHOUSE_METRICS_PORT"></port>
        <metrics>true</metrics>
        <events>true</events>
        <asynchronous_metrics>true</asynchronous_metrics>
    </prometheus>
    {{- end }}
  </clickhouse>
# EhLoSlrmb3
